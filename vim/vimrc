" Install Plugins
call plug#begin()
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'fatih/molokai'
Plug 'editorconfig/editorconfig-vim'
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'w0rp/ale'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'SirVer/ultisnips'
Plug 'jiangmiao/auto-pairs'
call plug#end()

" Color
syntax on
set t_Co=256
if (has("termguicolors"))
    set termguicolors
endif
colorscheme molokai
set background=dark
hi Search guibg=peru guifg=wheat

let mapleader = ","

" Make Y yank to end of line
map Y           y$

" Visual Cues
set hlsearch      " highlight searched for phrases
set incsearch     " highlight as you type you search phrase
set history=1024  " History size
set so=10         " Keep x lines (top/bottom) for scope

" Characters to show when whitespace is enabled
set list
set listchars=tab:⟶\ ,extends:›,precedes:‹,nbsp:·,trail:·
match ErrorMsg '\s\+$'

set noshowmode    " Hide the native mode, use the powerline
set splitright    " Add new windows towards the right
set splitbelow    " ... and bottom

" Text Formatting/Layout
set ai            " autoindent
set si            " smartindent
set smarttab      " Use shiftwidth to tab at line beginning
set cindent       " do c-style indenting
set tabstop=4     " tab spacing (settings below are just to unify it)
set softtabstop=4 " unify
set shiftwidth=4  " unify
set expandtab     " Give me spaces or give me death
set nowrap        " do not wrap lines

" Files/Backups
set autowrite                     " Save the file when shell/cmd are run
set autoread
set wildmenu
set wildmode=full                 " zsh style command mode completion
set autoread                      " No prompt for file changes outside Vim
set swapfile                      " Keep swapfiles
set wildignore+=tags,.git,*.o,tmp/**,vendor/**,node_modules/**
set isk+=_,$,@,%,#,-              " none of these should be word dividers, so make them not be
set directory=~/.vim-tmp,~/tmp,/var/tmp,/tmp
set backupdir=~/.vim-tmp,~/tmp,/var/tmp,/tmp
autocmd BufWritePre *.json execute '%!python -m json.tool' | w  " Auto-format json files

" Vim UI
set mouse=a                           " Mouse support
set laststatus=2                      " Show command bar
set cmdheight=1                       " the command bar is 2 hign
set number                            " turn on line numbers
set relativenumber                    " also turn on relative line numbers
set lz                                " do not redraw while running macros (much faster) (LazyRedraw)
set whichwrap+=<,>,h,l                " backspace and cursor keys wrap to
set fillchars=vert:\ ,stl:\ ,stlnc:\  " make the splitters between windows be blank
" make splitters between windows use the same background/foreground color as vim
hi VertSplit guibg=bg guifg=bg
set scrolloff=5                       " Scroll when the cursor is 5 lines from edge
set cursorline                        " Highlight current line

" Case insensitive search by default
set ignorecase
set smartcase

" Plugin Config
let g:go_fmt_command = "goimports"

let NERDSpaceDelims = 1 " Spaces after comment

map <Leader>/ <plug>NERDCommenterToggle

map \ :NERDTreeToggle<CR>
let g:ale_fixers = { 'javascript': ['eslint'] }

let g:ale_fix_on_save = 1
let g:ale_sign_error = '✕'
let g:ale_sign_warning = '⚠'
let g:ale_sign_column_always = 1
hi ALEErrorSign ctermbg=234
hi ALEErrorSign ctermfg=red
hi ALEError ctermfg=red
hi ALEWarningSign ctermbg=234
hi ALEWarningSign ctermfg=yellow
hi ALEWarning ctermfg=yellow

" let g:deoplete#enable_at_startup = 1
" call deoplete#custom#option('auto_complete_delay', 200)
" let g:deoplete#file#enable_buffer_path = 1

" fzf open
map <Leader>p :Files<CR>

let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
